# measure moments targets
#srun --nodes=5 --tasks-per-node=20 --cpus-per-task=3 --cpu-bind=cores --mem=110GB python run_pipeline_3b.py

#srun --nodes=20 --tasks-per-node=5 --cpus-per-task=12 --cpu-bind=cores --mem=110GB python run_pipeline.py
#srun --nodes=5 --tasks-per-node=5 --cpus-per-task=12 --cpu-bind=cores --mem=110GB python run_pipeline_3b.py
## make targets - whatever is OK, no cost basically.
#srun --nodes= 20 --tasks-per-node=1 --cpus-per-task=60 --cpu-bind=cores --mem=110GB python run_pipeline.py
#measure moments deep field
#srun --nodes=20 --tasks-per-node=10 --cpus-per-task=6 --cpu-bind=cores --mem=110GB python run_pipeline.py
#make templates
#srun --nodes=20 --tasks-per-node=10 --cpus-per-task=6 --cpu-bind=cores --mem=110GB python run_pipeline.py
#srun --nodes=10 --tasks-per-node=2 --cpus-per-task=30 --cpu-bind=cores --mem=110GB python run_pipeline_

#srun --nodes=1 --tasks-per-node=1 --cpus-per-task=60 --cpu-bind=cores --mem=110GB python run_pipeline_3b.py




run:
     - measure_moments_targets
     - make_targets
     #- measure_moments_templates
     #- make_templates
     #- cpp_part

######################################################################
#                       general config
######################################################################
general:
    output_folder: '/global/cscratch1/sd/mgatti/BFD/runs_collab_meeting/baseline_3b_100t_4_tiers_different_PSF'
    n: 4.     # Default: 4
    sigma: 0.55  # Default: 0.5
    band_dict: [['r',0.7],['i',0.2],['z',0.1]] #[['r',1.0]] #
    bands: ['r','i', 'z'] #['r'] #
    
######################################################################
#                       measure_moments_targets
######################################################################

measure_moments_targets:
    # This first part parallelises (MPI) on tiles and it does 5x multiprocessing on chunk size.
    # Usually 1 tile per node is enough.
    
    path_data: '/global/cscratch1/sd/mgatti/BFD/data/'
    tiles: ['DES2347-5414'] # It can be 'ALL', a random number of tiles (e.g., 20), or a list with the names of the tiles.
    agents_chunk: 10
    chunk_size: 100. # It measures the moments CHUNK_SIZE targets simulataneously
    max_target_per_tile: 4000
    MOF_subtraction: False
    shredder: None #path for the MOF subtraction
    cut_psf : [False,25]
    MPI_per_tile : True # speed up for testing on 1 TILE
    minimum_number_of_bands : 3
    interp_masking : False
    frac_limit: 0.3 # limit for throwing away targets
    COADD_only: True
    
    # simulate targets ******************************
    simulated_templates: '/project/projectdirs/des/BFD_Y6/bfd/Marco/chunk_10k_similarSN_deep_fields_bdf_models_wphotoz.npy'
    setup_image_sims: True
    noise_factor: 0.01 #0.1 and index_P0,index_P0_PSF=40 for basic high SNR run.
    noise_ext: 2.3
    number_of_replicas: 100 # it generates 5x simulated targets from each stamp.
    g1: [0.02,-0.02]
    g2: [0.,0.]
    maskless: True
    noiseless: False
    #fix the galaxy & PSFfor all. I've set it to 40 in the past.
    index_P0: False
    index_P0_PSF: False
    index_fixed: False
    
    
######################################################################
#                       make_target
######################################################################

make_targets:
    # we divide the targets into bins depending on the covariance of Mf.
    # to compare with cov_mf take the power of two
    sigmaM_min: 22   #   150
    sigmaM_max: 50  # 15000
    steps: 1
    # additional cuts:
    sn_min: 0 # minimum S/N on flux
    sn_max: 5000
    Mf_max: 90000
    Mf_min: 0.
    

    

                  
######################################################################
#                       measure_moments_templates
######################################################################

measure_moments_templates:
    # There are ~ 244 tiles in des y3 deep fields. it's all parallelised with MPI, running on each tile.
    # srun --nodes= 10 --tasks-per-node=10 --cpus-per-task=6 --cpu-bind=cores --mem=110GB python run_pipeline.py


    path_coadd_deepfields: '/global/project/projectdirs/des/BFD_Y6/deep_fields_coadd/'
    deep_fields_catalog: '/global/project/projectdirs/des/BFD_Y6/deep_fields_coadd/y3_deep_fields.fits'
    fields: ['COSMOS_UltraVISTA_Willv2'] # , 'SN-C3', 'SN-E2', 'SN-X3']
    tiles: ['COSMOS_C32_r3764p01']
    agents_chunk: 6
    chunk_size: 100
    max_target_per_tile: 10000 # 00
    MOF_subtraction: False
    shredder: '/global/project/projectdirs/des/BFD_Y6/deep_fields_coadd/mof/run-ugriz-mof02.fits'
    cut_psf : [False,25]
    minimum_number_of_bands : 3 # set it to the max otherwise bias incoming! -- 
    interp_masking : False
    frac_limit: 0.3 # limit for throwing away targets
    COADD_only: True
    
    # image simlations setup ******
    simulated_templates: '/project/projectdirs/des/BFD_Y6/bfd/Marco/chunk_1k_deep_fields_bdf_models.npy'
    setup_image_sims: True
    number_of_replicas: 1 #do not change for templates
    noise_factor: 0.0001
    noise_ext: 2.3
    maskless: True
    noiseless: False
    index_P0: False
    index_P0_PSF: False
    index_fixed: False # you can't use it with multiple templates --
    
######################################################################
#                       make_templates
######################################################################

make_templates:
    sigma_max: 6.5 # we only keep templates within sigma_max (chi2 includes MX,MY,Mf,det supression)
    sigma_step: 1.2 #maximum shift between template
    xy_max: 2         
    sn_min: 0 # minimum S/N on flux
    chunks: 5 # It makes templates from #obj tile /chunks deep fields galaxies at a time
    sn_max: 50000
    Mf_max: 90000
    Mf_min: 0.
    stage: ['compute','assembly'] #['compute','assembly']
    
    
###############
cpp_part:
    chunks: 400
    image_sims: True
    noisetiers: 'all'
    minsn: 5
    maxsn: 100
    add_labels: ['ISp_','ISm_']
    #stage: ['assemble','selection','compute_m'] #['split','integrate','assemble','selection']
   # stage: ['split','integrate'] #,'assemble','selection','compute_m'] #['split','integrate','assemble','selection']
    #stage: ['split','integrate','assemble','compute_m'] 
    stage: ['split','integrate','assemble','compute_m'] #,'integrate','assemble','selection','compute_m'] #,'integrate'] #
    #stage: ['assemble','selection','compute_m'] #,'selection','compute_m'] #,'integrate'] #['split','integrate','assemble']
    
    
# /global/project/projectdirs/des/BFD_Y6/bfd/bin/meanShear -targetFile=/global/cscratch1/sd/mgatti/BFD/runs_collab_meeting/baseline_1b_100t_4_tiers_3/ISp_targets_sample_g.fits
# 1b: -0.00096 +- 0.00035
# 1b 25psf: -0.00286 +- 0.00035
# 3b = -0.00060 +- 0.00040
# 3b 25 psf = 0.00173 +- 0.00047